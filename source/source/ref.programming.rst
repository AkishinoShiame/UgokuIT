.. _ref.programming:

==========================
#Ref.2 プログラミング
==========================

この参考について
===================

個人はCプログラミング言語が最初勉強し始めた言語だけど、それから色んな言語も勉強したことがあります。

C、C++、C#、JAVA、PYTHON、などの言語を勉強後、一個メインコンセプトがわかりました。

大部の言語は基本の判断構文やループ構文の概念が似てるだらか、通用に書くのはそれらのロジック的に説明がメインと思います。

だからここの最初は基準的に方法をメモする。別パーツは各言語の特殊なポイントが記録する。


プログラミング基礎
====================


外部・内部 Library
^^^^^^^^^^^^^^^^^^^^

大部の言語は一般開発者に便利をメインに考えてある、だからだいぶのコアLibraryがあります。

言語によっても、大部のプログラミング言語は ``include`` か ``import`` か使う。

Library名は、各言語の公式サイトや、ネットで検索で分かる。

例えば、Cはstdio.h、stdlib.hとか、Pythonはosとか。


変数・関数
^^^^^^^^^^^^

これについては主に２類で分類出来ます。開発者区別派と言語自動作成派。

開発者区別での変数作成は：

.. code-block:: none
    :linenos:

    int <変数名>    説明：整数。
    float <変数名>  説明：小数。
    double <変数名> 説明：小数や整数の特に大きいサイス。
    char <変数名>   説明：１文字。
    string <変数名> 説明：複数文字。
    bool <変数名>   説明：ロジックの真、偽。
    date <変数名>   説明：時間構造の変数。

    (上の定義) <変数名>［<数字>］ 説明：陣列、複数空間。

    class <変数名> {} 説明：大括弧に複数上の変数を定義出来る、これは自定義クラスで呼ぶ。

これらの例は、C、C++、JAVA、など。

言語自動作成の変数定義は：

.. code-block:: none
    :linenos:

    var <変数名>
    <変数名> = <内容>

    説明：どちらも出来る。

こういう言語は大体、 ``type`` が ``typeof`` という関数で変数の形式を確認可能です。

このデサインは例えば、PYTHON、PHPなど。


基本構文
=========

+、-、*、/、%とかは基本の基本。後は内容表示"print"か"printf"。

他主にはIF、IF-ELSE、SWITCH-CASE、WHILE、FORなど。

後もう一個はロジックの真偽判断。AND（＆）とOR（｜）。

.. code-block:: none
    :linenos:

    1 + 1  // =2
    1 - 1  // =0
    3 * 4  // =12
    5 / 3  // =1
    5 % 3  // =2

    print("Hello World !")  //画面：Hello World !

.. note::

    画面表示は言語によって使う構文が違う。
    
    例えばこれらのも同じ結果。

    printf("Hello World !");

    print("Hello World !")

    system.out.prtinln("Hello World !")

    console.log("Hello World !")

これからはIF-ELSE、SWITCH-CASE、WHILE、FORなどの紹介。

AND（＆）とOR（｜）は大体True（真）やFalse（偽）の判断と応用だから。

ここにメモの必要はないと思う。

.. code-block:: none
    :linenos:

    if(＜条件＞)
        ＜真の場合実行する＞
    elseif(＜他の条件＞) //これはオプション、そうして言語によって、偶に"elif"の書く方もあります。
        ＜”他の条件”が真の場合実行する＞
    else
        ＜前の全ての条件が外れときの場合実行する＞
    
    for(＜初期化＞;＜判断条件＞;＜毎回追加＞)
        ＜実行するコード＞

Forの場合は、最初の初期化は例えば ``i=1`` を指定する、それから判断条件は ``i<3`` で定義なら、今のiは1で、3より小さいから、下のコードを実行する。

最後の毎回追加でもし、 ``i=2+i`` に定義したら、さっき＜実行するコード＞を実行完了すると、ここにiを2を足りると、iは今3になる。

そうして、この構文の続きはiをもう一回 ``i<3`` を判断し、iは今3だから、この条件は偽だから、このforループを終了する。

.. code-block:: none
    :linenos:

    switch(＜変数＞)
        case ＜条件＞:
            ＜変数と条件が同じ時実行する＞ //これは必要の場合増幅する。
        
        default:
            ＜以上の条件は全て満ちない場合実行＞
    
    While(＜条件＞)
        ＜実行するコード＞
    
    // whileの場合は条件に当てるの時はいつも中身のコードを実行する。

ここ以上の全ては基本です。

他のは各言語公式サイトにlibraryなどの参考。

これから少しclassと陣列の説明。

.. code-block:: none
    :linenos:

    class ＜変数名を定義＞{
        int ＜内部変数の定義１＞
        char ＜内部変数の定義２＞
    }

    ＜変数名を定義＞.＜内部変数の定義１＞ = ＜ある数字＞ //こうやってclass内の内容を変わるや更新

    float ＜変数名＞[＜数字＞] //これはその数字の量のfloatを定義。

    ＜変数名＞[0] = ２ //変数名の第一の所を2を変更。


ライブラリ(Library)
=====================



Python
========


Go
======

