.. _ref.programming:

==========================
#Ref.2 プログラミング
==========================

この参考について
===================

個人はCプログラミング言語が最初勉強し始めた言語だけど、それから色んな言語も勉強したことがあります。

C、C++、C#、JAVA、PYTHON、などの言語を勉強後、一個メインコンセプトがわかりました。

大部の言語は基本の判断構文やループ構文の概念が似てるだらか、通用に書くのはそれらのロジック的に説明がメインと思います。

だからここの最初は基準的に方法をメモする。別パーツは各言語の特殊なポイントが記録する。


プログラミング基礎
====================


外部・内部 Library
^^^^^^^^^^^^^^^^^^^^

大部の言語は一般開発者に便利をメインに考えてある、だからだいぶのコアLibraryがあります。

言語によっても、大部のプログラミング言語は ``include`` か ``import`` か使う。

Library名は、各言語の公式サイトや、ネットで検索で分かる。

例えば、Cはstdio.h、stdlib.hとか、Pythonはosとか。


変数・関数
^^^^^^^^^^^^

これについては主に２類で分類出来ます。開発者区別派と言語自動作成派。

開発者区別での変数作成は：

.. code-block:: none
    :linenos:

    int <変数名>    説明：整数。
    float <変数名>  説明：小数。
    double <変数名> 説明：小数や整数の特に大きいサイス。
    char <変数名>   説明：１文字。
    string <変数名> 説明：複数文字。
    bool <変数名>   説明：ロジックの真、偽。
    date <変数名>   説明：時間構造の変数。

    (上の定義) <変数名>［<数字>］ 説明：陣列、複数空間。

    class <変数名> {} 説明：大括弧に複数上の変数を定義出来る、これは自定義クラスで呼ぶ。

これらの例は、C、C++、JAVA、など。

言語自動作成の変数定義は：

.. code-block:: none
    :linenos:

    var <変数名>
    <変数名> = <内容>

    説明：どちらも出来る。

こういう言語は大体、 ``type`` が ``typeof`` という関数で変数の形式を確認可能です。

このデサインは例えば、PYTHON、PHPなど。


基本構文
=========

+、-、*、/、%とかは基本の基本。後は内容表示"print"か"printf"。

他主にはIF、IF-ELSE、SWITCH-CASE、WHILE、FORなど。

後もう一個はロジックの真偽判断。AND（＆）とOR（｜）。

.. code-block:: none
    :linenos:

    1 + 1  // =2
    1 - 1  // =0
    3 * 4  // =12
    5 / 3  // =1
    5 % 3  // =2

    print("Hello World !")  //画面：Hello World !

.. note::

    画面表示は言語によって使う構文が違う。
    
    例えばこれらのも同じ結果。

    printf("Hello World !");

    print("Hello World !")

    system.out.prtinln("Hello World !")

    console.log("Hello World !")



Python
========


Go
======

